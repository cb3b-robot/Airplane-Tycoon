<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Airline Game - Satellite Map Version</title>
<!-- Leaflet CSS -->
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-o9N1j7r6l6kVf2iUHZjdyU6kEuexnNJNwKtvv2bP4z0="
  crossorigin=""
/>
<style>
  html, body, #map {
    height: 100%;
    margin: 0;
  }
  #info {
    position: absolute;
    top: 10px;
    left: 10px;
    background: rgba(255,255,255,0.9);
    padding: 8px;
    z-index: 1000;
    font-family: Arial, sans-serif;
    border-radius: 6px;
    max-width: 280px;
  }
  #info h2 {
    margin: 0 0 8px 0;
  }
</style>
</head>
<body>

<div id="info">
  <h2>Your Airline</h2>
  <p><strong>Owned Airport:</strong> <span id="ownedAirportName">New York JFK</span></p>
  <p>Planes flying between your airports!</p>
</div>

<div id="map"></div>

<!-- Leaflet JS -->
<script
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-o9N1j7r6l6kVf2iUHZjdyU6kEuexnNJNwKtvv2bP4z0="
  crossorigin=""
></script>

<script>
  // Airports data: name, coordinates (lat, lng), and ownership status
  const airports = [
    { id: 'JFK', name: "New York JFK", coords: [40.6413, -73.7781], owned: true },
    { id: 'LHR', name: "London Heathrow", coords: [51.4700, -0.4543], owned: false },
    { id: 'SFO', name: "San Francisco", coords: [37.6213, -122.3790], owned: false },
    { id: 'NRT', name: "Tokyo Narita", coords: [35.7767, 140.3189], owned: false },
    { id: 'SYD', name: "Sydney", coords: [-33.8688, 151.2093], owned: false },
    { id: 'DXB', name: "Dubai", coords: [25.2532, 55.3657], owned: false },
    { id: 'CDG', name: "Paris Charles de Gaulle", coords: [49.0097, 2.5479], owned: false },
    { id: 'GRU', name: "São Paulo Guarulhos", coords: [-23.4356, -46.4731], owned: false },
  ];

  // Initialize map centered roughly on Atlantic, zoomed out
  const map = L.map('map').setView([20, -30], 2);

  // Add Esri satellite tiles (free for demo)
  const Esri_WorldImagery = L.tileLayer(
    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
    {
      maxZoom: 19,
      attribution:
        'Tiles © Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',
    }
  ).addTo(map);

  // Icons for airports
  const airportIconOwned = L.icon({
    iconUrl:
      'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Map_pin_icon.svg/40px-Map_pin_icon.svg.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
  });
  const airportIconUnowned = L.icon({
    iconUrl:
      'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Map_pin_icon_red.svg/40px-Map_pin_icon_red.svg.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
  });

  // Add airport markers to map
  const airportMarkers = {};
  airports.forEach((airport) => {
    const marker = L.marker(airport.coords, {
      icon: airport.owned ? airportIconOwned : airportIconUnowned,
      title: airport.name,
    }).addTo(map);

    marker.bindPopup(`<b>${airport.name}</b><br>ID: ${airport.id}`);

    airportMarkers[airport.id] = marker;
  });

  // Plane class using Leaflet circle markers for demo
  class Plane {
    constructor(startAirportId, endAirportId, speed = 0.02) {
      this.startAirport = airports.find((a) => a.id === startAirportId);
      this.endAirport = airports.find((a) => a.id === endAirportId);
      this.speed = speed; // progress per frame
      this.progress = 0; // 0 to 1
      this.forward = true;

      this.marker = L.circleMarker(this.startAirport.coords, {
        radius: 8,
        color: 'yellow',
        fillColor: 'orange',
        fillOpacity: 0.9,
      }).addTo(map);
    }

    update() {
      if (this.forward) {
        this.progress += this.speed;
        if (this.progress >= 1) {
          this.progress = 1;
          this.forward = false;
        }
      } else {
        this.progress -= this.speed;
        if (this.progress <= 0) {
          this.progress = 0;
          this.forward = true;
        }
      }

      const lat = this.lerp(
        this.startAirport.coords[0],
        this.endAirport.coords[0],
        this.progress
      );
      const lng = this.lerp(
        this.startAirport.coords[1],
        this.endAirport.coords[1],
        this.progress
      );

      this.marker.setLatLng([lat, lng]);
    }

    lerp(a, b, t) {
      return a + (b - a) * t;
    }
  }

  // Initialize two planes flying from owned airport (JFK) to two other airports
  const playerOwnedAirports = airports.filter((a) => a.owned).map((a) => a.id);
  const planes = [
    new Plane('JFK', 'LHR'),
    new Plane('JFK', 'SFO'),
  ];

  // Update loop for planes
  function updatePlanes() {
    planes.forEach((plane) => plane.update());
    requestAnimationFrame(updatePlanes);
  }

  updatePlanes();
</script>

</body>
</html>
